{
  "swagger": "2.0",
  "info": {
    "title": "transit.proto",
    "version": "1.0"
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "components": {
    "securitySchemes": {
      "auth": {
        "type": "http",
        "scheme": "Token"
      }
    }
  },
  "paths": {
    "/api/v1/ack/{prefix}/{group}/{id}": {
      "get": {
        "summary": "Ack acknowledges the successful receipt and processing of a message id.\nAcknowledging a message allows you to receive a new message.",
        "operationId": "Ack",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Acked"
            }
          }
        },
        "parameters": [
          {
            "name": "prefix",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "uint64"
          }
        ],
        "tags": [
          "Transit"
        ],
        "security": {
          "auth": []
        }
      }
    },
    "/api/v1/ping/{id}": {
      "get": {
        "summary": "Ping tests server is alive.",
        "operationId": "Ping",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Pong"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "uint64"
          },
          {
            "name": "leader",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "leading",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "Transit"
        ],
        "security": {
          "auth": []
        }
      }
    },
    "/api/v1/publish": {
      "post": {
        "summary": "Publish takes a message entry and returns the published message id.",
        "operationId": "Publish",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Publication"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          }
        ],
        "tags": [
          "Transit"
        ],
        "security": {
          "auth": []
        }
      }
    },
    "/api/v1/subscribe/{prefix}/{group}": {
      "get": {
        "summary": "Subscribe takes topic and group details and returns a subscription stream.",
        "operationId": "Subscribe",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          }
        },
        "parameters": [
          {
            "name": "prefix",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "allotments",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "delay",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "max_age",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "distribution",
            "description": " - Arbitrary: Arbitrary distribution means that any processor may get any message.\n - Requested: Requested distribution limits messages to processors that have requested type of the specific lot.\n - Assigned: Assigned distribution will assign unrequested lots to processors based on load.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Arbitrary",
              "Requested",
              "Assigned"
            ],
            "default": "Arbitrary"
          },
          {
            "name": "delivery",
            "description": " - Concurrent: Concurrent messages are not treated specially.\n - Drop: Drop means if there's currently one waiting, don't bother with this one and drop it.\n - Replace: Replace means if there's currently one waiting, replace it with this one.\n - Ignore: Ignore means if there's currently one waiting, delete it and place this one at the back of the queue.\n - Serial: A Serial message will not begin processing a duplicate identity message at the same time as another.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Concurrent",
              "Drop",
              "Replace",
              "Ignore",
              "Serial"
            ],
            "default": "Concurrent"
          }
        ],
        "tags": [
          "Transit"
        ],
        "security": {
          "auth": []
        }
      }
    }
  },
  "definitions": {
    "Acked": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "Command": {
      "type": "object",
      "properties": {
        "operation": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "compare": {
          "type": "string"
        },
        "versus": {
          "type": "string"
        }
      }
    },
    "DeliveryStrategy": {
      "type": "string",
      "enum": [
        "Concurrent",
        "Drop",
        "Replace",
        "Ignore",
        "Serial"
      ],
      "default": "Concurrent",
      "description": " - Concurrent: Concurrent messages are not treated specially.\n - Drop: Drop means if there's currently one waiting, don't bother with this one and drop it.\n - Replace: Replace means if there's currently one waiting, replace it with this one.\n - Ignore: Ignore means if there's currently one waiting, delete it and place this one at the back of the queue.\n - Serial: A Serial message will not begin processing a duplicate identity message at the same time as another."
    },
    "DistributionStrategy": {
      "type": "string",
      "enum": [
        "Arbitrary",
        "Requested",
        "Assigned"
      ],
      "default": "Arbitrary",
      "description": " - Arbitrary: Arbitrary distribution means that any processor may get any message.\n - Requested: Requested distribution limits messages to processors that have requested type of the specific lot.\n - Assigned: Assigned distribution will assign unrequested lots to processors based on load."
    },
    "Entry": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint64"
        },
        "topic": {
          "type": "string"
        },
        "lot": {
          "type": "string"
        },
        "identity": {
          "type": "string"
        },
        "message": {
          "$ref": "#/definitions/protobufAny"
        },
        "not_before": {
          "type": "integer",
          "format": "uint64"
        },
        "not_after": {
          "type": "integer",
          "format": "uint64"
        },
        "meta": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Notification": {
      "type": "object",
      "properties": {
        "sub": {
          "$ref": "#/definitions/Sub"
        },
        "entry": {
          "$ref": "#/definitions/Entry"
        }
      }
    },
    "Pong": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint64"
        },
        "leader": {
          "type": "string"
        },
        "leading": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "Publication": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint64"
        }
      }
    },
    "String": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "StringMap": {
      "type": "object",
      "properties": {
        "values": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Sub": {
      "type": "object",
      "properties": {
        "prefix": {
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "uint64"
        }
      }
    },
    "Success": {
      "type": "object",
      "properties": {
        "succeed": {
          "type": "boolean",
          "format": "boolean"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name whose content describes the type of the\nserialized protocol buffer message.\n\nFor URLs which use the scheme `http`, `https`, or no scheme, the\nfollowing restrictions and interpretations apply:\n\n* If no scheme is provided, `https` is assumed.\n* The last segment of the URL's path must represent the fully\n  qualified name of the type (as in `path/google.protobuf.Duration`).\n  The name should be in a canonical form (e.g., leading \".\" is\n  not accepted).\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    }
  },
  "externalDocs": {
    "description": "Transit server repository",
    "url": "https://github.com/nedscode/transit"
  }
}
