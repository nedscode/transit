{
  "swagger": "2.0",
  "info": {
    "title": "transit.proto",
    "version": "1.0"
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "components": {
    "securitySchemes": {
      "auth": {
        "type": "http",
        "scheme": "Token"
      }
    }
  },
  "paths": {
    "/api/v1/ack/{sub.prefix}/{sub.group}/{sub.id}": {
      "get": {
        "summary": "Ack acknowledges the successful receipt and processing of a message id.\nAcknowledging a message causes you to receive a new message.",
        "operationId": "Ack",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Acked"
            }
          }
        },
        "parameters": [
          {
            "name": "sub.prefix",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sub.group",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sub.id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "uint64"
          },
          {
            "name": "close",
            "description": "Close causes the subscription to be terminated without receiving a new message.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "Transit"
        ]
      }
    },
    "/api/v1/ping/{id}": {
      "get": {
        "summary": "Ping tests server is alive.",
        "operationId": "Ping",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Pong"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "uint64"
          },
          {
            "name": "leader",
            "description": "Leader is the current cluster leader to whom all commands other than Ping must be sent.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "leading",
            "description": "Leading is true if the pinged server is the leader.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "Transit"
        ],
        "security": {
          "auth": []
        }
      }
    },
    "/api/v1/publish": {
      "post": {
        "summary": "Publish takes a message entry and returns the published message id.",
        "operationId": "Publish",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Publication"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          }
        ],
        "tags": [
          "Transit"
        ],
        "security": {
          "auth": []
        }
      }
    },
    "/api/v1/subscribe/{prefix}/{group}": {
      "get": {
        "summary": "Subscribe takes topic and group details and returns a subscription stream.",
        "operationId": "Subscribe",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          }
        },
        "parameters": [
          {
            "name": "prefix",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "allotments",
            "description": "Allotments contains a list of strings to match against `Entry.Lot`.\nIf the entry matches one of your Allotments, you will receive the message.\nEntries are shared amongst all subscribers that specify the matching Lot.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "delay",
            "description": "Delay specifies a minimum number of milliseconds before an entry becomes deliverable to you.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          },
          {
            "name": "max_age",
            "description": "MaxAge specifies a maximum number of milliseconds after which you're not interested in a message any more.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "uint64"
          },
          {
            "name": "no_data",
            "description": "NoData indicates that you're not interested in the content of the message, and not to send it.\nSpecify this option to save bandwidth if you only care about knowing a topic happend not what it's about.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "distribution",
            "description": "Distribution specifies what additional messages you want to receive other than your Allotted messages.\n\n - Arbitrary: Arbitrary distribution means that any processor may get any message.\n - Requested: Requested distribution limits messages to processors that have requested type of the specific lot.\n - Assigned: Assigned distribution will assign unrequested lots to processors based on load.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Arbitrary",
              "Requested",
              "Assigned"
            ],
            "default": "Arbitrary"
          },
          {
            "name": "delivery",
            "description": "Delivery specifies how you want duplicate entries in the queue to be dealt with (queue-wide option).\n\n - Concurrent: Concurrent messages are not treated specially.\n - Drop: Drop means if there's currently one waiting, don't bother with this one and drop it.\n - Replace: Replace means if there's currently one waiting, replace it with this one.\n - Ignore: Ignore means if there's currently one waiting, delete it and place this one at the back of the queue.\n - Serial: A Serial message will not begin processing a duplicate identity message at the same time as another.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Concurrent",
              "Drop",
              "Replace",
              "Ignore",
              "Serial"
            ],
            "default": "Concurrent"
          }
        ],
        "tags": [
          "Transit"
        ],
        "security": {
          "auth": []
        }
      }
    }
  },
  "definitions": {
    "Acked": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "format": "boolean",
          "description": "Success is set to true if the entry was acked successfully and false if not found or already acked."
        }
      },
      "description": "Acked is the result of an Acking of a Sub."
    },
    "Command": {
      "type": "object",
      "properties": {
        "operation": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "compare": {
          "type": "string"
        },
        "versus": {
          "type": "string"
        }
      }
    },
    "DeliveryStrategy": {
      "type": "string",
      "enum": [
        "Concurrent",
        "Drop",
        "Replace",
        "Ignore",
        "Serial"
      ],
      "default": "Concurrent",
      "description": " - Concurrent: Concurrent messages are not treated specially.\n - Drop: Drop means if there's currently one waiting, don't bother with this one and drop it.\n - Replace: Replace means if there's currently one waiting, replace it with this one.\n - Ignore: Ignore means if there's currently one waiting, delete it and place this one at the back of the queue.\n - Serial: A Serial message will not begin processing a duplicate identity message at the same time as another."
    },
    "DistributionStrategy": {
      "type": "string",
      "enum": [
        "Arbitrary",
        "Requested",
        "Assigned"
      ],
      "default": "Arbitrary",
      "description": " - Arbitrary: Arbitrary distribution means that any processor may get any message.\n - Requested: Requested distribution limits messages to processors that have requested type of the specific lot.\n - Assigned: Assigned distribution will assign unrequested lots to processors based on load."
    },
    "Entry": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint64",
          "description": "ID is the global ID that is assigned to the entry.\nThis will be assigned by the server and any value you specify will be ignored."
        },
        "topic": {
          "type": "string",
          "description": "Topic is a dot-separated hierarchical list of keywords that may be matched by subscription prefixes.\nFor example \"account.balance.deposit\" may be subscribed via \"account\" if someone wants to see all\naccount actions, or \"account.balance\" if they are only interested in balance affecting actions."
        },
        "lot": {
          "type": "string",
          "description": "Lot defines a batch of items that belong together and can be subscribed to by using `Subscription.Allotments`.\nFor example if the Lot is a branch ID, you could have a process that subscribes to messages for several branches."
        },
        "identity": {
          "type": "string",
          "description": "Identity is a string that identifies this message as unique to the specific topic.\nA delivery strategy may be defined for a queue that indicates how to deal with duplicate items."
        },
        "message": {
          "$ref": "#/definitions/protobufAny",
          "description": "Message contains the item that you want to send to subscribers detailing the entry."
        },
        "not_before": {
          "type": "integer",
          "format": "uint64",
          "description": "NotBefore indicates that the message will only be deliverable on or after the given milliseconds since epoch."
        },
        "not_after": {
          "type": "integer",
          "format": "uint64",
          "description": "NotAfter indicates that the message will be removed from all queues after the given milliseconds since epoch."
        },
        "meta": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Meta contains additional custom metadata (other than message) that will be delivered with the message.\nNote: Meta is delivered even if `Subscription.NoData` is specified by a subscriber."
        }
      },
      "description": "Entry represents a published entry in the message bus."
    },
    "Notification": {
      "type": "object",
      "properties": {
        "sub": {
          "$ref": "#/definitions/Sub",
          "description": "Contains the subscription detail to pass to Ack when you're finished processing the notification."
        },
        "entry": {
          "$ref": "#/definitions/Entry",
          "description": "Entry is the item you're being notified about."
        }
      },
      "description": "Notification is given to subscribers when a new message is available for them."
    },
    "Pong": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint64",
          "description": "ID is an incrementing ID indicating the most recently allocated Entry ID."
        },
        "leader": {
          "type": "string",
          "description": "Leader is the current cluster leader to whom all commands other than Ping must be sent."
        },
        "leading": {
          "type": "boolean",
          "format": "boolean",
          "description": "Leading is true if the pinged server is the leader."
        }
      },
      "description": "Pong is used by Ping to check the server is alive and who the current leader is."
    },
    "Publication": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint64",
          "description": "ID is the internally assigned ID for your submitted Entry."
        }
      },
      "description": "Publication is returned from a call to Publish."
    },
    "String": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "StringMap": {
      "type": "object",
      "properties": {
        "values": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Sub": {
      "type": "object",
      "properties": {
        "prefix": {
          "type": "string",
          "description": "Prefix is the topic prefix that the subscriber subscribed to."
        },
        "group": {
          "type": "string",
          "description": "Group is the group that the message was delivered to."
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "description": "ID is the ID from the delivered entry."
        }
      },
      "description": "Sub is provided to a subscriber in the notification and defines which entry in which inbox should be marked as\ndelivered when the Sub is Acked."
    },
    "Success": {
      "type": "object",
      "properties": {
        "succeed": {
          "type": "boolean",
          "format": "boolean"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name whose content describes the type of the\nserialized protocol buffer message.\n\nFor URLs which use the scheme `http`, `https`, or no scheme, the\nfollowing restrictions and interpretations apply:\n\n* If no scheme is provided, `https` is assumed.\n* The last segment of the URL's path must represent the fully\n  qualified name of the type (as in `path/google.protobuf.Duration`).\n  The name should be in a canonical form (e.g., leading \".\" is\n  not accepted).\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    }
  },
  "externalDocs": {
    "description": "Transit server repository",
    "url": "https://github.com/nedscode/transit"
  }
}
